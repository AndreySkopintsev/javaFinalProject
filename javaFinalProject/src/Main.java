import java.util.Scanner;

class Main{
    void main() {
        //TODO пока разбиение на задачи для группы видится как:
        // София 1) main функция: тут реализовать интерфейс для пользователя, убрать все в методы, тестить все остальные ветки
        // + комменты
        // + валидация
        // Алексей 2) CustomClass + builder (папка customClass)
        // Павел 3) Методы чтения входных данных + strategy pattern (папка readingInfo)
        // Виталий 4) Бинарный поиск (папка binarySearch)
        // Андрей 5) Сортировка  (папка sorting)
        // Так же каждый делает по файлу для теста своих методов в папке tests.
        Scanner inputScanner = new Scanner(System.in);

        while (true){
            printCommands();
            System.out.println("\nВведите команду из списка:");
            String input = inputScanner.nextLine();
            Object[] inputObjects = new Object[0];
            boolean isExit = false;
            switch (input){
                //TODO все "кейсы" можно заменить на константы или enum, в целом как будто можно и так оставить
                //TODO функции чтения как будто по логике должны только возвращать массив Object, создание массива CustomClass
                // можно реализовать отдельно в том же CustomClass и передавать в метод массив Object. Какая-то валидация там уже не нужна
                // так как мы должны будем послать уже на этом этапе
                //все файлы для чтения входных данных пока лежат в папке readingInfo
                case "UserInput":
                    //TODO добавить метод в UserInput, которая возвращает массив Object для дальнейшей обработки (Object потому юзер будет вводить String, double, int)
                    //TODO Так же имеет смысл видимо в той же функции прописать логику с длиной массива (у меня в голове длина массива от юзера==количеству инпутов
                    // + мне кажется надо проверять чтобы по типам вышло все ровно, то есть мы ждем от юзера равное количество разных типов String/double/int
                    // и если не получаем от него, как пример, ровно три int три String и три double, то говорим что мы таким не занимаемся и идем на следующий виток)
                    // То есть в итоге метод должен уметь:
                    // 1) принимать длину массива
                    // 2) делать необходимое количество запросов на данные у юзера
                    // 3) валидировать что юзер не ввел гадостей/неверное количество ожидаемых данных

                    //TODO просто тестовый метод посмотреть как из switch'a вернуть массив
                    inputObjects = returnArray();
                    break;
                case "File":
                    //TODO реализовать метод для чтения из файла в ReadingFromFile
                    // В целом функционал как будто такой же: проверить валидность + небольшое отличие по длине массива можно сделать
                    // чтобы читалось только n строк файла (типа длина переданного массива).
                    break;
                case "Random":
                    //TODO реализовать метод рандомного заполнения в RandomInfo. Тут у нас полный контроль и как будто валидация не нужна
                    // кроме проверки длины массива, должна делиться на три без остатка. Далее просто возвращаем массив Object набитый рандомом,
                    // но опять же важно чтобы количество данных каждого типа было равным
                    break;
                case "Exit":
                    //TODO выход из цикла, не уверен как это можно сделать прям из switch'a думаю по какой-нибудь boolean переменной
                    // типа isExit
                    isExit = true;
                    break;
                default:
                    System.out.println("Введенная команда не поддерживается");

            }

            if (isExit){
                System.out.println("Спасибо что воспользовались нашей программой");
                break;
            }
            //TODO удалить, тест для inputObjects, чтобы intellij не ругался
            for(int i=0;i<inputObjects.length;i++){
                System.out.println(inputObjects[i]);
            }
            //TODO тут прокидывать массив Object в наш CustomClass метод для преобразования в массив типа CustomClass[]

            //TODO после получения массива CustomClass[] отправлять его в функцию многопоточной сортировки (пока в процессе,
            // думаю что будет лежать в папке sorting). Так же можно решить делать сортировку всегда
            // или давать пользователю промт (типа "Посортируем?")
        }
    }

    public void printCommands(){
        //TODO просто написать несколько строк для команд типа "Введите UserInput для того чтобы ввести данные вручную"
        System.out.println("hello");
    }

    //TODO на удаление, просто тест
    public Object[] returnArray(){
        return new Object[]{"Apple", 1, "Orange", 2.4};
    }
}



